// docs.go
// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.example.com/support",
            "email": "support@example.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "schemes": {{ marshal .Schemes }},
    "paths": {
        "/scan": {
            "post": {
                "summary": "Scan Files",
                "description": "Scans provided files for vulnerabilities.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "payload",
                        "description": "Scan request payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ScanRequestPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created - Scan processed and results stored."
                    },
                    "400": {
                        "description": "Bad Request - Invalid payload."
                    },
                    "500": {
                        "description": "Internal Server Error - An error occurred during scanning."
                    }
                },
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ]
            }
        },
        "/query": {
            "post": {
                "summary": "Query Vulnerabilities",
                "description": "Queries vulnerabilities based on provided severity.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "payload",
                        "description": "Query request payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/QueryRequestPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Vulnerabilities returned."
                    },
                    "204": {
                        "description": "No Content - No vulnerabilities found."
                    },
                    "400": {
                        "description": "Bad Request - Invalid query payload."
                    },
                    "500": {
                        "description": "Internal Server Error - Query failed."
                    }
                },
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ]
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "X-API-KEY",
            "in": "header"
        }
    },
    "definitions": {
        "ScanRequestPayload": {
            "type": "object",
            "properties": {
                "repo": {
                    "type": "string",
                    "example": "https://github.com/username/repository"
                },
                "files": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": ["file1.json", "file2.json"]
                }
            }
        },
        "QueryRequestPayload": {
            "type": "object",
            "properties": {
                "filters": {
                    "type": "object",
                    "properties": {
                        "severity": {
                            "type": "string",
                            "example": "HIGH"
                        }
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it.
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "GitHub Scanner API",
	Description:      "API for scanning GitHub repositories and querying vulnerabilities.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
